%const N        100 ; number of iterations
%memory n       [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00] ; store n in memory
%memory n_fat   [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00] ; store n! in memory
%memory sum     [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00] ; store sum in memory

; 1/1 + 1/1 + 1/(1 * 2) + 1/(1 * 2 * 3) + ...
main:
    push 1 ; n
    push n
    fwrite
    push 1 ; n!
    push n_fat
    fwrite
    push 2.0 ; sum
    push sum
    fwrite

    call compute_e
    
    ; debug print the result
    push sum
    fread
    print

    halt

; recursive function that computes e until n < N
compute_e:
    ; n++
    push n
    fread
    push 1
    fadd
    dup
    push n
    fwrite

    ; n! = n+1!
    push n_fat
    fread
    fmul
    dup
    push n_fat
    fwrite

    ; 1/n!
    push 1
    swap 1
    fdiv

    ; sum = 1/n!
    push sum
    fread
    fadd
    push sum
    fwrite

    ; if n < N compute_e
    push n
    fread
    push N
    fcmp
    jg base_case

    call compute_e

    base_case:
        ret
