; allocate 20 bytes in memory used for printing
%memory std_print_memory 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
%const std_print_memory_size 20

; standard input, output, error
%const STDIN 0
%const STDOUT 1
%const STDERR 3

; constants used inside the library
%const std_print_base 10
%const std_ascii_0 0x30
%const std_minus_sign 0x2D

; cleans the memory reserved for print operations
std_clean_print_memory:
    push std_print_memory
    dup
    push std_print_memory_size
    add
    swap 1

    std_clean_print_memory_loop:
        dup
        push 0
        swap 1
        write

        push 1
        add

        swap 1
        dup
        swap 2
        dup
        swap 2
        cmp
        jl std_clean_print_memory_loop

    drop
    drop
    ret

; prints a positive number in base 10
; character by character.
std_print_positive:
    swap 1 ; swap return address

    dup
    push std_print_memory + std_print_memory_size - 1 ; counter start at end of std_print_memory
    swap 1

    std_print_positive_loop:
        ; (val % base) + '0'
        push std_print_base
        mod
        push std_ascii_0
        add

        ; push char to memory    
        swap 1
        dup
        swap 2
        swap 1
        write

        ; decrement counter
        push 1
        sub

        ; val /= base
        swap 1
        push std_print_base
        div
        dup
        swap 2
        swap 1

        dup
        jnz std_print_positive_loop

    ; clean the stack
    drop
    drop
    drop

    ; print the memory
    push STDOUT
    push std_print_memory
    push std_print_memory_size
    syscall 1
    drop

    ret

; print an unsigned integer.
dump_u64:
    swap 1
    call std_clean_print_memory
    call std_print_positive
    ret

; print a signed integer.
dump_i64:
    swap 1
    call std_clean_print_memory
    dup
    jge dump_i64_skip_negative

    ; print minus sign
    push std_minus_sign
    push std_print_memory
    write
    push STDOUT
    push std_print_memory
    push 1
    syscall 1
    drop
    push 0
    push std_print_memory
    write

    push -1
    imul

    dump_i64_skip_negative:
        ; print the positive part
        call std_print_positive
        ret 

; returns the length of a given null-terminated string.
strlen:
    swap 1
    dup
    dup
    read
    jz std_strlen_exit

    std_strlen_loop:
        push 1
        add
        dup
        read
        jnz std_strlen_loop

    std_strlen_exit:
        swap 1
        sub
        swap 1
        ret   
