; Standard input, output, error.
%const stdin 0
%const stdout 1
%const stderr 2

; Memory allocated for printing operations.
%memory std_print_memory [0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0]
%const std_print_memory_size 20

; constants used inside the library
%const std_print_base 10

; Cleans the memory reserved for print operations.
std_clean_print_memory:
    push std_print_memory
    dup
    push std_print_memory_size
    add
    swap 1

    std_clean_print_memory_loop:
        dup
        push 0
        swap 1
        write

        push 1
        add

        swap 1
        dup
        swap 2
        dup
        swap 2
        cmp
        jl std_clean_print_memory_loop

    drop
    drop
    ret

; Prints a positive number in base 10
; character by character.
std_print_positive:
    swap 1 ; swap return address

    dup
    push std_print_memory + std_print_memory_size - 1 ; counter start at end of std_print_memory
    swap 1

    std_print_positive_loop:
        ; (val % base) + '0'
        push std_print_base
        mod
        push '0'
        add

        ; push char to memory    
        swap 1
        dup
        swap 2
        swap 1
        write

        ; decrement counter
        push 1
        sub

        ; val /= base
        swap 1
        push std_print_base
        div
        dup
        swap 2
        swap 1

        dup
        jnz std_print_positive_loop

    ; clean the stack
    drop
    drop
    drop

    ; print the memory
    push stdout
    push std_print_memory
    push std_print_memory_size
    syscall 1
    drop

    ret

; Print an unsigned integer.
dump_u64:
    swap 1
    call std_clean_print_memory
    call std_print_positive
    ret

; Print a signed integer.
dump_i64:
    swap 1
    call std_clean_print_memory
    dup
    jge dump_i64_skip_negative

        ; print minus sign
        push '-'
        push std_print_memory
        write
        push stdout
        push std_print_memory
        push 1
        syscall 1
        drop
        push 0
        push std_print_memory
        write

        push -1
        imul

    dump_i64_skip_negative:
        ; print the positive part
        call std_print_positive
    ret 

; TODO: Add dump_f64 method